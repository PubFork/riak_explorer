#!/usr/bin/env escript

main(Args) ->
    io:setopts([{encoding, utf8}]),
    os:cmd(epmd_path() ++ " -daemon"),

    {ok, TargetNode, Op} = process_args(Args, undefined, start),

    %% Extract the RPC timeout from process dictionary, if it's defined
    RpcTimeout = case erlang:get(rpctimeout) of
                     undefined ->
                         60000;
                     Value ->
                         Value
                 end,

    [application:start(App) || App <- [crypto, public_key, ssl]],

    %% See if the node is currently running  -- if it's not, we'll bail
    case {net_kernel:hidden_connect_node(TargetNode), net_adm:ping(TargetNode)} of
        {true, pong} ->
            ok;
        {false, pong} ->
            io:format(standard_error, "failed to connect to node ~p .\n", [TargetNode]),
            halt(1);
        {_, pang} ->
            io:format(standard_error, "Node ~p not responding to pings.\n", [TargetNode]),
            halt(1)
    end,

    case Op of
      start ->
        case rpc:call(TargetNode, application, ensure_started, [riak_explorer], RpcTimeout) of
          ok -> io:format("Riak Explorer Started.~n");
          Reason -> io:format("Unable to start Riak Explorer, reason: ~p.~n", [Reason])
        end;
      stop ->
        case rpc:call(TargetNode, application, stop, [riak_explorer], RpcTimeout) of
          ok -> io:format("Riak Explorer Stopped.~n");
          Reason -> io:format("Unable to stop Riak Explorer, reason: ~p.~n", [Reason])
        end
    end,

    %% All done
    net_kernel:stop().

process_args([], TargetNode, Op) ->
    {ok, TargetNode, Op};
process_args(["-setcookie", Cookie | Rest], TargetNode, Op) ->
    erlang:set_cookie(node(), list_to_atom(Cookie)),
    process_args(Rest, TargetNode, Op);
process_args(["-name", TargetName | Rest], _, Op) ->
    ThisNode = append_node_suffix(TargetName, "_maint_"),
    {ok, _} = net_kernel:start([ThisNode, longnames]),
    process_args(Rest, nodename(TargetName), Op);
process_args(["-start" | Rest], TargetNode, _Op) ->
    process_args(Rest, TargetNode, start);
process_args(["-stop" | Rest], TargetNode, _Op) ->
    process_args(Rest, TargetNode, stop).

epmd_path() ->
    ErtsBinDir = filename:dirname(escript:script_name()),
    Name = "epmd",
    case os:find_executable(Name, ErtsBinDir) of
        false ->
            case os:find_executable(Name) of
                false ->
                    io:format("Could not find epmd.~n"),
                    halt(1);
                GlobalEpmd ->
                    GlobalEpmd
            end;
        Epmd ->
            Epmd
    end.

nodename(Name) ->
    case string:tokens(Name, "@") of
        [_Node, _Host] ->
            list_to_atom(Name);
        [Node] ->
            [_, Host] = string:tokens(atom_to_list(node()), "@"),
            list_to_atom(lists:concat([Node, "@", Host]))
    end.

append_node_suffix(Name, Suffix) ->
    case string:tokens(Name, "@") of
        [Node, Host] ->
            list_to_atom(lists:concat([Node, Suffix, os:getpid(), "@", Host]));
        [Node] ->
            list_to_atom(lists:concat([Node, Suffix, os:getpid()]))
    end.